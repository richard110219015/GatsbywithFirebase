{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.constructor.js","webpack:///./node_modules/core-js/modules/es6.date.to-json.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/es6.object.freeze.js","webpack:///./node_modules/core-js/modules/es6.object.define-properties.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./node_modules/core-js/modules/es6.array.find.js","webpack:///./node_modules/firebase/database/dist/index.esm.js"],"names":["global","__webpack_require__","inheritIfRequired","dP","f","gOPN","isRegExp","$flags","$RegExp","RegExp","Base","proto","prototype","re1","re2","CORRECT_NEW","p","tiRE","this","piRE","fiU","undefined","constructor","source","call","proxy","key","configurable","get","set","it","keys","i","length","$export","toObject","toPrimitive","P","F","Date","NaN","toJSON","toISOString","O","pv","isFinite","has","cof","fails","gOPD","$trim","trim","$Number","BROKEN_COF","TRIM","String","toNumber","argument","third","radix","maxCode","first","charCodeAt","code","digits","slice","l","parseInt","value","arguments","that","valueOf","split","j","isObject","meta","onFreeze","$freeze","S","defineProperties","process","Object","defineProperty","exports","ex","id","firebase","tslib_1","util","logger$1","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","var_args","_i","message","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","__spread","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","ln","bits","Infinity","Math","abs","pow","min","floor","LN2","round","reverse","join","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","test","intVal","exceptionGuard","setTimeout","stack","beingCrawled","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","enumerable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","location","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","e_1","_a","results","charAt","_b","__values","_c","next","done","segment","kv","e_1_1","decodeQuery","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","nextPushId","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","root","base12","buildPennant","chunkSize","low","high","childTree","buildBalancedTree","namedNode","middle","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","__assign","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","json","node_1","childData","children_1","childrenHavePriority_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","forEach","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","SparseSnapshotTree","children","Map","find","size","childKey","remember","clear","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","concat","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","e_2","removed","hadCompleteView","hasCompleteView","entries","_d","__read","viewQueryId","e_2_1","getQueryViews","e_3","e_3_1","e_4","e_4_1","viewForQuery","getCompleteView","viewExistsForQuery","e_5","e_5_1","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","getToken","forceRefresh","then","Promise","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","document","addEventListener","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","called_1","wrappedFn_1","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","User-Agent","platform","env","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","_e","_f","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","Repo","forceRestClient","app","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","dbEmulatorHost","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","__awaiter","__generator","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","_forceRestClient","registerDatabase","instance","registerService","unused","module","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","argv","versions","addListener","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","$find","KEY","forced","callbackfn","__webpack_exports__"],"mappings":"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","file":"12-c69a9dfffad71fcf51bf.js","sourcesContent":["var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","'use strict';\n\nrequire(\"core-js/modules/es6.object.freeze\");\n\nrequire(\"core-js/modules/es6.array.reduce\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.map\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.search\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.function.bind\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nvar tslib_1 = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util.jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function createStoragefor(domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new logger$1.Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nvar sha1 = function sha1(str) {\n  var utf8Bytes = util.stringToByteArray(str);\n  var sha1 = new util.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function buildLogMessage_() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < var_args.length; i++) {\n    if (Array.isArray(var_args[i]) || var_args[i] && typeof var_args[i] === 'object' && typeof var_args[i].length === 'number') {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += util.stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function enableLogging(logger_, persistent) {\n  util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = logger$1.LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\n\n\nvar log = function log() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) enableLogging(true);\n  }\n\n  if (logger) {\n    var message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nvar logWrapper = function logWrapper(prefix) {\n  return function () {\n    var var_args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      var_args[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, tslib_1.__spread([prefix], var_args));\n  };\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nvar error = function error() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib_1.__spread(var_args));\n  logClient.error(message);\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nvar fatal = function fatal() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib_1.__spread(var_args));\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} var_args\r\n */\n\n\nvar warn = function warn() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib_1.__spread(var_args));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n  return typeof data === 'number' && (data != data || // NaN\n  data == Number.POSITIVE_INFINITY || data == Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n  if (util.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function wrappedFn_1() {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false);\n    } else if (document.attachEvent) {\n      // IE.\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') wrappedFn_1();\n      }); // fallback to onload.\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nvar nameCompare = function nameCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nvar stringCompare = function stringCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nvar requireKey = function requireKey(key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n  if (typeof obj !== 'object' || obj === null) return util.stringify(obj);\n  var keys = [];\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += util.stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1,\n      s,\n      e,\n      f,\n      ln,\n      i,\n      bits,\n      str; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nvar errorForServerCode = function errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nvar tryParseInt = function tryParseInt(str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nvar exceptionGuard = function exceptionGuard(fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function beingCrawled() {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n  var timeout = setTimeout(fn, time);\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function get() {\n      return new Path('');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n\n\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n\n\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) return this.pieces_[this.pieces_.length - 1];\n    return null;\n  };\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  };\n\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n\n\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n\n\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n\n\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n\n\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n        inner = innerPath.getFront();\n\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n\n\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n\n\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n\n\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n\n      ++i;\n      ++j;\n    }\n\n    return true;\n  };\n\n  return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += util.stringLength(this.parts_[i]);\n    }\n\n    this.checkValid_();\n  }\n\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function get() {\n      return 32;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function get() {\n      return 768;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @param {string} child */\n\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n\n    this.parts_.push(child);\n    this.byteLength_ += util.stringLength(child);\n    this.checkValid_();\n  };\n\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'\n\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n\n  return ValidationPath;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} host Hostname portion of the url for the repo\r\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n   * @param {string} namespace The namespace represented by the repo\r\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param {string=} persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost();\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util.assert(typeof type === 'string', 'typeof type must == string');\n    util.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    each(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  try {\n    for (var _b = tslib_1.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return results;\n}\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\n\n\nvar parseRepoInfo = function parseRepoInfo(dataURL) {\n  var parsedUrl = parseURL(dataURL),\n      namespace = parsedUrl.subdomain;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace == 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\n\n\nvar parseURL = function parseURL(dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    var parts = host.split('.');\n\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } // Support `ns` query param if subdomain not already set\n\n\n    if (subdomain === '' && 'ns' in queryParams) {\n      subdomain = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\n\nvar isValidKey = function isValidKey(key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidPathString = function isValidPathString(pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\n\n\nvar isValidPriority = function isValidPriority(priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && util.contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseDataArg = function validateFirebaseDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) return;\n  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\n\n\nvar validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\n\n\nvar validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) return;\n  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nvar validatePriority = function validatePriority(fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).'); // Special case to allow importing data with a .sv.\n\n  if (!isValidPriority(priority)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n};\n\nvar validateEventType = function validateEventType(fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function validateKey(fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n};\n\nvar validatePathString = function validatePathString(fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) return;\n  if (!isValidPathString(pathString)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n};\n\nvar validateRootPathString = function validateRootPathString(fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function validateUrl(fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function validateBoolean(fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean') throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\n\nvar nextPushId = function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    util.assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    util.assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @constructor\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\n\n\nvar priorityHashText = function priorityHashText(priority) {\n  if (typeof priority === 'number') return 'number:' + doubleToIEEE754String(priority);else return 'string:' + priority;\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\n\n\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function get() {\n      return __childrenNodeConstructor;\n    },\n    set: function set(val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) return {\n      '.value': this.getValue(),\n      '.priority': this.getPriority().val()\n    };else return this.getValue();\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n      if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      util.assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_.pop();\n    var result;\n    if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = {\n      key: node.key,\n      value: node.value\n    };\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    var blackDepth;\n\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\n\nvar Base12Num =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function logBase2(num) {\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function bitMask(bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\n\n\nvar buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function buildBalancedTree(low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function buildFrom12Array(base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function buildPennant(chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function attachPennant(pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12);\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function get() {\n      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = util.safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return util.contains(this.indexSet_, indexDefinition.toString());\n  };\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n\n    var newIndexSet = tslib_1.__assign({}, this.indexSet_);\n\n    newIndexSet[indexName] = indexDefinition;\n\n    var newIndexes = tslib_1.__assign({}, this.indexes_);\n\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\n      var index = util.safeGet(_this.indexSet_, indexName);\n      util.assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name != namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = util.map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function get() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n    if (front === null) return this;\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    util.assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0,\n          newPriority = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) return null;\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = [];\n\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n      if (!this.getPriority().isEmpty()) toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n        if (childHash !== '') toHash_1 += ':' + key + ':' + childHash;\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\n\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\n\n\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\n\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (util.contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON$1);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (childPathString) {\n    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    util.validateCallback('DataSnapshot.forEach', 1, action, false);\n    if (this.node_.isLeafNode()) return false;\n    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    if (this.node_.isLeafNode()) return false;else return !this.node_.isEmpty();\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function get() {\n      return this.ref_.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return util.contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    util.assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child(\n    /** @type {!string} */\n    change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    var _this = this;\n\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherKeys = Object.keys(other.callbacks_);\n        var thisKeys = Object.keys(this.callbacks_);\n        var otherCount = otherKeys.length;\n        var thisCount = thisKeys.length;\n\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey = otherKeys[0];\n            var thisKey = thisKeys[0];\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(function (eventType) {\n              return other.callbacks_[eventType] === _this.callbacks_[eventType];\n            });\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n\n  return ChildEventRegistration;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function set(val) {\n      __referenceConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n\n\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n\n\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n\n\n  Query.prototype.getRef = function () {\n    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    util.validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    util.validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n\n\n  Query.prototype.off = function (eventType, callback, context) {\n    util.validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    util.validateCallback('Query.off', 2, callback, true);\n    util.validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param failureCallbackOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\n    var _this = this;\n\n    util.validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    util.validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n\n    var firstCall = true;\n    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises\n\n    deferred.promise[\"catch\"](function () {});\n\n    var onceCallback = function onceCallback(snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n\n        _this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(eventType, onceCallback,\n    /*cancel=*/\n    function (err) {\n      _this.off(eventType, onceCallback);\n\n      if (ret.cancel) ret.cancel.bind(ret.context)(err);\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    } // Calling with no params tells us to start at the beginning.\n\n\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    util.validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n\n\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n\n\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      util.validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      util.validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Query;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\n\n\nvar SparseSnapshotTree =\n/** @class */\nfunction () {\n  function SparseSnapshotTree() {\n    this.value = null;\n    this.children = new Map();\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return The retrieved node, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      var childKey = path.getFront();\n      path = path.popFront();\n\n      if (this.children.has(childKey)) {\n        var childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @param data The new data, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      var childKey = path.getFront();\n\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      var child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return True if this node should now be removed.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value;\n          this.value = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        var childKey = path.getFront();\n        path = path.popFront();\n\n        if (this.children.has(childKey)) {\n          var safeToRemove = this.children.get(childKey).forget(path);\n\n          if (safeToRemove) {\n            this.children[\"delete\"](childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param prefixPath Path to look up node for.\r\n   * @param func The function to invoke for each tree.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param func The function to invoke for each child.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    this.children.forEach(function (tree, key) {\n      func(key, tree);\n    });\n  };\n\n  return SparseSnapshotTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\n\n\nvar generateWithValues = function generateWithValues(values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\n\n\nvar resolveDeferredValue = function resolveDeferredValue(value, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  } else {\n    util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\n\n\nvar resolveDeferredValueTree = function resolveDeferredValueTree(tree, serverValues) {\n  var resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function (path, node) {\n    resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\n  });\n  return resolvedTree;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\n\n\nvar resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredValue(rawPri, serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredValue(leafNode.getValue(), serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\n\n\nvar OperationSource =\n/** @class */\nfunction () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/\n  true, false, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/\n  true, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/\n    true, queryId,\n    /*tagged=*/\n    true);\n  };\n\n  return OperationSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite(\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  affectedTree,\n  /**@inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\n\nvar EmptyChildren = function EmptyChildren() {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  };\n\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /**@inheritDoc */\n  source,\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\n\n\nvar ViewCache =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n\n\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false), new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false));\n  return ViewCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    util.assert(type == Change.CHILD_ADDED || type == Change.CHILD_CHANGED || type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_ADDED) {\n        this.changeMap[\"delete\"](childKey);\n      } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\n      } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_ADDED) {\n        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\n      } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar ProcessorResult =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\n\n\nvar ViewProcessor =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n\n\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n\n\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw util.assertionError('Unknown operation type: ' + operation.type);\n    }\n\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n\n\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(\n      /** @type {!Node} */\n      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange(\n        /** @type {!Node} */\n        newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n          serverNode = void 0;\n\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n\n        if (childKey == '.priority') {\n          util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority\n\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront(); // update child\n\n          var newEventChild = void 0;\n\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n\n\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    var viewMergeTree;\n\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    } // Only filter server node if it is currently filtered\n\n\n    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n\n    var serverCache = viewCache.getServerCache();\n\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n\n  return ViewProcessor;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function set(val) {\n      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SyncPoint.prototype.isEmpty = function () {\n    return this.views.size === 0;\n  };\n\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var e_1, _a;\n\n    var queryId = operation.source.queryId;\n\n    if (queryId !== null) {\n      var view = this.views.get(queryId);\n      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events = [];\n\n      try {\n        for (var _b = tslib_1.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var view = _c.value;\n          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = this.views.get(queryId);\n\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n\n      var viewCache = new ViewCache(new CacheNode(\n      /** @type {!Node} */\n      eventCache, eventCacheComplete, false), new CacheNode(\n      /** @type {!Node} */\n      serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    } // This is guaranteed to exist now, we just created anything that was missing\n\n\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n\n\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var e_2, _a;\n\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n\n    if (queryId === 'default') {\n      try {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (var _b = tslib_1.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = tslib_1.__read(_c.value, 2),\n              viewQueryId = _d[0],\n              view = _d[1];\n\n          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n          if (view.isEmpty()) {\n            this.views[\"delete\"](viewQueryId); // We'll deal with complete views later.\n\n            if (!view.getQuery().getQueryParams().loadsAllData()) {\n              removed.push(view.getQuery());\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      var view = this.views.get(queryId);\n\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          this.views[\"delete\"](queryId); // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n\n  SyncPoint.prototype.getQueryViews = function () {\n    var e_3, _a;\n\n    var result = [];\n\n    try {\n      for (var _b = tslib_1.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (!view.getQuery().getQueryParams().loadsAllData()) {\n          result.push(view);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * @param path The path to the desired complete snapshot\r\n   * @return A complete cache, if it exists\r\n   */\n\n\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var e_4, _a;\n\n    var serverCache = null;\n\n    try {\n      for (var _b = tslib_1.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        serverCache = serverCache || view.getCompleteServerCache(path);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return serverCache;\n  };\n\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  };\n\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n\n  SyncPoint.prototype.getCompleteView = function () {\n    var e_5, _a;\n\n    try {\n      for (var _b = tslib_1.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (view.getQuery().getQueryParams().loadsAllData()) {\n          return view;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  return SyncPoint;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    each(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n\n\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param path The path to check for\r\n   * @return Whether there is a complete write at that path\r\n   */\n\n\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param path The path to get a complete write\r\n   * @return The node if complete at that path, or null otherwise.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return A list of all complete children.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n\n    return children;\n  };\n\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return Whether this CompoundWrite is empty\r\n   */\n\n\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param node The node to apply this CompoundWrite to\r\n   * @return The node with all writes applied\r\n   */\n\n\n  CompoundWrite.prototype.apply = function (node) {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  };\n\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  return CompoundWrite;\n}();\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTree =\n/** @class */\nfunction () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n\n\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n\n\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n\n\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n\n\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        each(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function filter(write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      }); // Add any complete children we have from the set\n\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   */\n\n\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   */\n\n\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n\n    toIterate = toIterate.withIndex(index);\n\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n\n        next = iter.getNext();\n      }\n\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (var childName in writeRecord.children) {\n        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   */\n\n\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   */\n\n\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   */\n\n\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i]; // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = util.safeGet(write.children, relativePath.getFront());\n\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          }\n        } else {\n          throw util.assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n\n    return compoundWrite;\n  };\n\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTreeRef =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n\n  return WriteTreeRef;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param revert True if the given write failed and needs to be reverted\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        each(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param eventRegistration If null, all callbacks are removed.\r\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return Cancel events, if cancelError was provided.\r\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n   * it, but as this is only used by transaction code, that should always be the case anyways.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   *\r\n   * @param path The path to the data we want\r\n   * @param writeIdsToExclude A specific set to be excluded\r\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        each(childMap, function (_key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap[\"delete\"](removedQueryKey);\n        this.tagToQueryMap[\"delete\"](removedQueryTag);\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   *\r\n   * @return The normalized query\r\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef();\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @return This method can return events to support synchronous data sources\r\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          each(childMap, function (_key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function hashFn() {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function onComplete(status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap.get(tag);\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n      * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n      * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar AuthTokenProvider =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!FirebaseApp} app_\r\n   */\n  function AuthTokenProvider(app_) {\n    this.app_ = app_;\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n\n\n  AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, // .catch\n    function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return AuthTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!util.contains(this.counters_, name)) this.counters_[name] = 0;\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return util.deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StatsManager =\n/** @class */\nfunction () {\n  function StatsManager() {}\n\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  };\n\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  };\n\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n\n    var delta = tslib_1.__assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && util.contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n\n\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n\n\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n\n\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n\n\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n\n      if (eventList) {\n        var eventPath = eventList.getPath();\n\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  };\n\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\n\n\nvar EventList =\n/** @class */\nfunction () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n\n\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n\n\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n\n  return EventList;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} var_args\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var var_args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      var_args[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = tslib_1.__spread(this.listeners_[eventType]);\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function _loop_1() {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function _loop_2(i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId An identifier for this connection, used for logging\r\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) return; //Set up a callback that gets triggered once a connection is set up.\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib_1.__read(args, 5),\n            command = _a[0],\n            arg1 = _a[1],\n            arg2 = _a[2],\n            arg3 = _a[3],\n            arg4 = _a[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) return; // we closed the connection.\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command == FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib_1.__read(args, 2),\n            pN = _a[0],\n            data = _a[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return BrowserPollConnection.forceAllow_ || !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp() && !util.isNodeSdk();\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util.isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n    } else if (iframe.document) {\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (util.isNodeSdk() && this.myID) {\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      var theURL = this.urlFn(urlParams);\n      FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial);\n\n    var doNewRequest = function doNewRequest() {\n      _this.outstandingRequests[\"delete\"](serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function readyStateCB() {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util.isNodeSdk()) {\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) return;\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url;\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\n\nvar SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId identifier for this transport\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (util.isNodeSdk()) {\n        var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device\n          }\n        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') == 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.');\n\n      var error = e.message || e.data;\n\n      if (error) {\n        _this.log_(error);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length == this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = util.jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function get() {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n\n      try {\n        for (var _b = tslib_1.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} id - an id for this connection\r\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeout_ms = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ != 2\n      /* DISCONNECTED */\n      ) {\n          if (conn === _this.rx_) {\n            _this.onPrimaryMessageReceived_(message);\n          } else if (conn === _this.secondaryConn_) {\n            _this.onSecondaryMessageReceived_(message);\n          } else {\n            _this.log_('message on old connection');\n          }\n        }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ == 0\n    /* CONNECTING */\n    ) {\n        this.conn_.start();\n        this.onConnectionEstablished_(this.conn_, timestamp);\n\n        if (PROTOCOL_VERSION !== version) {\n          warn('Protocol version mismatch detected');\n        } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n        this.tryStartUpgrade_();\n      }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host); // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.close();\n      } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('sending ping on primary.');\n        this.sendData_({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n        if (this.repoInfo_.isCacheableHost()) {\n          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n          this.repoInfo_.internalHost = this.repoInfo_.host;\n        }\n      } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('Realtime connection lost.');\n      }\n\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n        throw 'Connection is not connected';\n      } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n        this.log_('Closing realtime connection.');\n        this.state_ = 2\n        /* DISCONNECTED */\n        ;\n        this.closeConnections_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_();\n          this.onDisconnect_ = null;\n        }\n      }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param repoInfo_ Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ A callback for new data from the server\r\n   */\n\n\n  function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    /** Map<path, Map<queryId, ListenSpec>> */\n\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !util.isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    _this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(util.stringify(msg));\n    util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\n      var warnings = util.safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || util.isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    if (hash !== undefined) request[\n    /*hash*/\n    'h'] = hash; // TODO: Only keep track of the most recent put for a given path?\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) onComplete(message[\n      /*status*/\n      's'], message[\n      /* data */\n      'd']);\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + util.stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') this.onDataUpdate_(body[\n    /*path*/\n    'p'], body[\n    /*data*/\n    'd'],\n    /*isMerge*/\n    false, body['t']);else if (action === 'm') this.onDataUpdate_(body[\n    /*path*/\n    'p'], body[\n    /*data*/\n    'd'],\n    /*isMerge=*/\n    true, body['t']);else if (action === 'c') this.onListenRevoked_(body[\n    /*path*/\n    'p'], body[\n    /*query*/\n    'q']);else if (action === 'ac') this.onAuthRevoked_(body[\n    /*status code*/\n    's'], body[\n    /* explanation */\n    'd']);else if (action === 'sd') this.onSecurityDebugPacket_(body);else error('Unrecognized action received from server: ' + util.stringify(action) + '\\nAre you using the latest client?');\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_();\n    }, Math.floor(timeout));\n  };\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n\n      var closeFn_1 = function closeFn_1() {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n\n      var sendRequestFn = function sendRequestFn(msg) {\n        util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful\n\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1,\n          /* onKill= */\n          function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error) {\n        self_1.log_('Failed to get token: ' + error);\n\n        if (!canceled_1) {\n          if (util.CONSTANTS.NODE_ADMIN) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn_1();\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (util.isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  };\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  };\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map[\"delete\"](queryId);\n\n      if (map.size === 0) {\n        this.listens[\"delete\"](normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth();\n\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = tslib_1.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib_1.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e[\"return\"])) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c[\"return\"])) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (util.CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (util.CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (util.isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (util.isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return util.isEmpty(this.interruptReasons_) && online;\n  };\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (util.safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error == 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + util.querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = util.jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  function Repo(repoInfo_, forceRestClient, app) {\n    var _this = this;\n\n    this.repoInfo_ = repoInfo_;\n    this.app = app;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = new SparseSnapshotTree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null;\n    var authTokenProvider = new AuthTokenProvider(app);\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride\n\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n\n        try {\n          util.stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactions_init_(); // Used for .info.\n\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n\n        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n\n\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n\n        return infoEvents;\n      },\n      stopListening: function stopListening() {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        }); // No synchronous events for network-backed sync trees\n\n\n        return [];\n      },\n      stopListening: function stopListening(query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  }\n  /**\r\n   * @return The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return The namespace represented by the repo.\r\n   */\n\n\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n\n\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   */\n\n\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   */\n\n\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = util.map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = util.map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n\n    var affectedPath = path;\n\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }; // TODO: This should be @private but it's used by test_access.js and internal.js\n\n\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n\n    each(updates, function (value, key) {\n      _this.updateInfo_(key, value);\n    });\n  };\n\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    }); // Start with our existing data and merge each child into it.\n\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    each(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      var newNodeUnresolved = nodeFromJSON$1(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    });\n\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      each(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n\n        _this.rerunTransactions_(affectedPath);\n      }); // We queued the events above, so just flush the queue here\n\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   */\n\n\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n\n      var affectedPath = _this.abortTransactions_(path);\n\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    if (util.isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        each(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n\n    if (typeof console === 'undefined') return;\n    var stats;\n\n    if (showDelta) {\n      if (!this.statsListener_) this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    each(stats, function (stat, value) {\n      var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).\n\n      for (var i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n\n      console.log(paddedStat + value);\n    });\n  };\n\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n\n  Repo.prototype.log_ = function () {\n    var var_args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      var_args[_i] = arguments[_i];\n    }\n\n    var prefix = '';\n\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n\n    log.apply(void 0, tslib_1.__spread([prefix], var_args));\n  };\n\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n          if (errorReason) message += ': ' + errorReason;\n          var error = new Error(message);\n          error.code = code;\n          callback(error);\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function get() {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Repo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function cmp(a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function cmp(a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util.assert(oldEventCache.numChildren() == this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n\n\n  function Reference(repo, path) {\n    var _this = this;\n\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    } // call Query's constructor, passing in the repo and path.\n\n\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    util.validateArgCount('Reference.key', 0, 0, arguments.length);\n    if (this.path.isEmpty()) return null;else return this.path.getBack();\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.child = function (pathString) {\n    util.validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) validateRootPathString('Reference.child', 1, pathString, false);else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    util.validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    util.validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n\n    return ref;\n  };\n  /** @return {!Database} */\n\n\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    util.validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    util.validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal,\n    /*priority=*/\n    null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    util.validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.remove = function (onComplete) {\n    util.validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    util.validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    if (applyLocally === undefined) applyLocally = true;\n    var deferred = new util.Deferred();\n\n    if (typeof onComplete === 'function') {\n      deferred.promise[\"catch\"](function () {});\n    }\n\n    var promiseComplete = function promiseComplete(error, committed, snapshot) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    util.validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.push = function (value, onComplete) {\n    util.validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    util.validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef[\"catch\"] = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise[\"catch\"](function () {});\n    }\n\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function get() {\n      return this.databaseProp();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function get() {\n      return this.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function get() {\n      return this.getParent();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function get() {\n      return this.getRoot();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Node in a Tree.\r\n */\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n\n\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n        next;\n\n    while ((next = path.getFront()) !== null) {\n      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n\n\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n\n\n  Tree.prototype.setValue = function (value) {\n    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n\n\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n\n\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n\n\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n\n    each(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n\n\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) action(this);\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action,\n      /*includeSelf=*/\n      true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) action(this);\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n\n\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n\n      node = node.parent();\n    }\n\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) action(child);else child.forEachImmediateDescendantWithValue(action);\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n\n\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n\n\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n\n\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = util.contains(this.node_.children, childName);\n\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n\n  return Tree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\r\n * @enum {number}\r\n */\n\n\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\"; // Temporary state used to mark transactions that need to be aborted.\n\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n\n\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n\nRepo.prototype.transactions_init_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\n\n\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.\n\n  var valueCallback = function valueCallback() {};\n\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n\n  var unwatcher = function unwatcher() {\n    watchRef.off('value', valueCallback);\n  }; // Initialize transaction.\n\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {\n      priorityForNode = util.safeGet(newVal, '.priority');\n      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    priorityForNode\n    /** @type {null|number|string} */\n    = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n\n\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n\n\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    util.assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n\n\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this; // Mark transactions as sent and increment retry count!\n\n\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /**@type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.\n\n\n      _this.sendReadyTransactions_();\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) queue[i].status = TransactionStatus.NEEDS_ABORT;else queue[i].status = TransactionStatus.RUN;\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n\n\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n\n\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot\n\n          var lastInput\n          /** @type {!Node} */\n          = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n\n\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n\n  var transactionNode = this.transactionQueueTree_;\n\n  while ((front = path.getFront()) !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n\n\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n\n\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n\n  var nodeQueue = node.getValue();\n\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n\n\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n\n  var queue = node.getValue();\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n\n\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n\n\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {\n        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');\n    }\n\n    var parsedUrl = parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    var dbEmulatorHost = undefined;\n\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app) {\n    var appRepos = util.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repo_\r\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference(repo_, Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function get() {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype[\"delete\"] = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        this.database.checkDeleted_('delete');\n        RepoManager.getInstance().deleteRepo(this.database.repo_);\n        this.database.repo_ = null;\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\n\n\nvar forceLongPolling = function forceLongPolling() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function forceWebSockets() {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function isWebSocketsAvailable() {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function setSecurityDebugCallback(ref, callback) {\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\n\nvar stats = function stats(ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\n\nvar statsIncrementCounter = function statsIncrementCounter(ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nvar dataUpdateCount = function dataUpdateCount(ref) {\n  return ref.repo.dataUpdateCount;\n};\n\nvar interceptServerData = function interceptServerData(ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n\nvar INTERNAL =\n/*#__PURE__*/\nObject.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\n\nvar hijackHash = function hijackHash(newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\n\n\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\n\nvar queryIdentifier = function queryIdentifier(query) {\n  return query.queryIdentifier();\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\n\n\nvar forceRestClient = function forceRestClient(_forceRestClient) {\n  RepoManager.getInstance().forceRestClient(_forceRestClient);\n};\n\nvar TEST_ACCESS =\n/*#__PURE__*/\nObject.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.\n\n  var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) {\n    return RepoManager.getInstance().databaseFromApp(app, url);\n  }, // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }, null, true);\n\n  if (util.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;","// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import '@firebase/database';"],"sourceRoot":""}